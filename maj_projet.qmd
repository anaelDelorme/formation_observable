---
title: "Mise à jour du site"
toc-depth: 4
---

## Ajouter une page

Nous allons ajouter une page sur l'historique météorologique en Occitanie. Pour cela nous créons un fichier **meteo_occitanie.md** dans le répertoire `src`.

Vous pouvez mettre le code suivant : 

````
# Météo en Occitanie

```{js}
display(1 + 2);

``` 
````

Ce qui affichera : 

![](img/create_page.png)

:::callout-note
Si votre codespaces n'est plus actif, veuillez le relancer. Et pour relancer le site en dev, tapez dans la console : `npm run dev` dans le répertoire `hello-framework`
:::

Vous avez pu le constater, la création de pages est très facile ! Et vous avez également constater que le fichier créé était en `.md`. C'est un markdown, que l'on connait déjà dans Rmarkdown ou dans Quarto.

Pour en savoir plus sur le markdown en Observable : [Markdown en observable](aller_plus_loin.qmd) 

## Chargement de données

Je vous propose de travailler sur les données de météofrance pour les départements d'Occitanie en 2023 et 2024. Vous trouverez les données sur Github : <https://github.com/anaelDelorme/observable_formation_SSP/blob/main/formation/src/data/>. Pour télécharger les données, ilfaut cliquer sur le fichier puis cliquer sur le bouton `download raw`.        

Pour commencer, télécharger uniquement les données pour la Haute-Garonne.        

Puis déposer le fichier dans votre site observable : `src/data/`.   

Dans le fichier meteo.md, nous allons charger les données. Pour cela nous utilisons la fonction `FileAttachment`. Cette fonction est chargée par défaut. Elle propose plusieurs méthodes (par exemple) :     

-   file.csv     
-   file.xlsx    
-   file.text     
-   file.json    
-   file.parquet     
-   file.arrow    
-   ...     

Nous avons récupéré un fichier csv. Nous pouvons donc mettre à jour meteo.md en indiquant :


````
```js
// Import des données
const meteo_31_2023_2024 = FileAttachment("data/Q_31_latest-2023-2024_RR-T-Vent.csv").csv()
```
````

Cela crée une constante (dans notre cas c'est un tableau) qui s'appelle `meteo_31_2023_2024`. En indiquant `js`, je dis que le code sera du javascript (js). Si je veux afficher le code sur ma page web, il faut que je mette `js echo`.   


:::{.callout-important}
En JavaScript, une **const** est un mot-clé utilisé pour déclarer une variable dont la valeur est constante, c'est-à-dire qu'elle ne peut pas être réaffectée (ré-assignée) après sa déclaration initiale.   

Une fois déclarée avec const, la valeur de la variable ne peut pas être modifiée. Toute tentative de réaffecter une nouvelle valeur à cette variable générera une erreur.
:::

:::{.callout-warning}
Si vous essayer de voir les données en faisant un `display(meteo_31_2023_2024)` (équivalent à un `print()` en R) dans le bloc js d'import, vous verrez que l'objet est un **Promise**. Une Promise en JavaScript est une fonctionnalité qui permet de gérer les opérations asynchrones, c'est-à-dire des tâches qui prennent du temps à s'exécuter et dont le résultat n'est pas immédiatement disponible. C'est une sorte de promesse qui représente une valeur potentielle qui peut être résolue (avec succès) ou rejetée (en cas d'erreur).    

Vous ne pouvez pas accéder aux données de `meteo_31_2023_2024` dans ce bloc. Mais Observable est sympa : il *résous* automatiquement les promises dans les autres blocs. Ainsi si vous créez un autre bloc `js` et que vous mettez `display(meteo_31_2023_2024)`, alors il affichera les données du **Promise**.

Plus d'infos : <https://observablehq.com/framework/reactivity#promises>
:::

## Affichage des données

Je souhaite afficher les données. Mais Javascript ne permet pas un accès très simple aux données. Je vous propose de faire une fonction pour extraire, typer et renommer les données. Pour cela, vous pouvez insérer le bloc de code suivant : 

````
```js
function extractProperties(obj) {
  const properties = obj["NUM_POSTE;NOM_USUEL;LAT;LON;ALTI;AAAAMMJJ;RR;QRR;TN;QTN;HTN;QHTN;TX;QTX;HTX;QHTX;TM;QTM;TNTXM;QTNTXM;TAMPLI;QTAMPLI;TNSOL;QTNSOL;TN50;QTN50;DG;QDG;FFM;QFFM;FF2M;QFF2M;FXY;QFXY;DXY;QDXY;HXY;QHXY;FXI;QFXI;DXI;QDXI;HXI;QHXI;FXI2;QFXI2;DXI2;QDXI2;HXI2;QHXI2;FXI3S;QFXI3S;DXI3S;QDXI3S;HXI3S;QHXI3S"].split(";");
  
  // Fonction pour vérifier si une valeur est numérique
  function isNumeric(value) {
    return !isNaN(value) && isFinite(value);
  }

  // Convertir les valeurs en nombres si elles sont numériques
  const precipitation = isNumeric(properties[6]) ? Number(properties[6]) : null;
  const temp_min = isNumeric(properties[8]) ? Number(properties[8]) : null;
  const temp_max = isNumeric(properties[12]) ? Number(properties[12]) : null;
  const ampli_thermique = isNumeric(properties[20]) ? Number(properties[20]) : null;
  const duree_gel_minute = isNumeric(properties[26]) ? Number(properties[26]) : null;

// Fonction pour transformer le champ date
  function convertToDate(aaaammjj) {
  
  if (/^\d{8}$/.test(aaaammjj)) {
    const year = aaaammjj.substring(0, 4);
    const month = aaaammjj.substring(4, 6);
    const day = aaaammjj.substring(6, 8);

    // Créer un nouvel objet Date
    return new Date(`${year}-${month}-${day}`);
  } else {
    throw new Error('La chaîne doit être au format AAAAMMJJ');
  }
}

const dateformatee = convertToDate(properties[5]);

  return {
    id_poste: properties[0], 
    nom_poste: properties[1], 
    lat: properties[2], 
    lon: properties[3], 
    date: dateformatee,
    precipitation: precipitation,
    temp_min: temp_min,
    temp_max: temp_max,
    ampli_thermique: ampli_thermique,
    duree_gel_minute: duree_gel_minute
  };
}
const meteo_31_2023_2024_extrait = meteo_31_2023_2024.map(extractProperties);
display(meteo_31_2023_2024_extrait);

```
````

J'aimerais maintenant afficher une phrase qui m'indique les températures max et min pour un lieu et une date donnée. Pour cela je vais créer un bloc de code en javascript pour récupérer les données :


````
```js
// Options pour le formatage de la date
const options = { year: 'numeric', month: '2-digit', day: '2-digit' };
const nom_poste_recherche = "ARBAS";
const date_recherche = new Date("2023-05-21");
// Conversion de l'objet Date en chaîne de caractères au format souhaité
const dateString = date_recherche.toLocaleDateString('fr-FR', options).split('/').join('-');

const objetTrouve = meteo_31_2023_2024_extrait.find(
  obj => obj.nom_poste === nom_poste_recherche && obj.date.getTime() === date_recherche.getTime()
);
display(objetTrouve)

```
````
:::{.callout-warning}
En Javascript les données au format date ne peuvent pas être comparées via un `===`. Pour les comparer il faut utilser la fonction getTime() : `date1.getTime() === date2.getTime()`.
:::

Puis j'écris une phrase directement en markdown en faisant référence aux données grâce au caractère **$**. Par exemple :     
`Les températures minimale et maximale pour la station ${nom_poste_recherche} à la date du ${dateFormatee} sont ${objetTrouve.temp_min}°C et ${objetTrouve.temp_max}°C.`


## Création d'un tableau

Je souhaite afficher un tableau avec les données que je viens de charger. Pour cela je peux très simplement utiliser la fonction `Inputs.table()` d'Observable.


````
```js
// Création d'une table d'affichage de mes données
Inputs.table(meteo_31_2023_2024_extrait)
```
````

Il est possible de faire un tableau plus joli en jouant sur les paramètres d'Inputs.table et du code html. Voici un exemple que vous pouvez tester :   

````
```js
// Trouver la valeur maximale des précipitations
const maxPrecipitation = Math.max(...meteo_31_2023_2024_extrait.map(d => d.precipitation));
display(maxPrecipitation)
// Création d'une table d'affichage avec mise en forme
display(Inputs.table(meteo_31_2023_2024_extrait,
    {
      columns: [
        "nom_poste",
        "date",
        "temp_min",
        "temp_max",
        "precipitation"
      ],
      header: {
        nom_poste: "Poste météo",
        date: "Date",
        temp_min: "Température min. (°C)",
        temp_max: "Température max. (°C)",
        precipitation: "Précipitation (mm)"
      },
      format: {
          nom_poste: (x) => x.charAt(0).toUpperCase() + x.slice(1).toLowerCase(),
          date: (x) => x.toLocaleDateString('fr-FR', options).split('/').join('-'),
          temp_min: (x) => {
            const temp = x.toFixed(1);
            if (x > 25) {
              return html`<span style="color: green;">${temp}</span>`; // Vert si supérieur à 25
            } else if (x < 0) {
              return html`<span style="color: red;">${temp}</span>`; // Rouge si négatif
            } else {
              return temp; // Aucune couleur si entre 0 et 25
            }
          },
          temp_max: (x) => {
            const temp = x.toFixed(1);
            if (x > 25) {
              return html`<span style="color: green;">${temp}</span>`; // Vert si supérieur à 25
            } else if (x < 0) {
              return html`<span style="color: red;">${temp}</span>`; // Rouge si négatif
            } else {
              return temp; // Aucune couleur si entre 0 et 25
            }
          },
          precipitation: (x) => {
            const temp = x.toFixed(1);
            const barLength = (x / maxPrecipitation) * 100;
            return html`<div style="
                  background: var(--theme-blue); 
                  color: black;
                  width: ${barLength}%; 
                  height: 20px;
                  float: right;
                  padding-right: 3px;
                  box-sizing: border-box;
                  overflow: visible;
                  display: flex;
                  justify-content: end;">
                    ${temp}
                  </div>`;
          }
        }
    })
)
```

````

En savoir plus sur les Inputs.table : <https://observablehq.com/framework/inputs/table>

## Création d'un graphique

Voyons maintenant comment faire un graphique avec Observable. Il est très simple faire des graphiques en utilisant la library **Observable Plot** car elle est incluse par défaut avec Observable framework.    
Plus d'infos :  <https://observablehq.com/plot/>

### Graphique en ligne

Je souhaite avec les courbes de températures max et min pour la station d'Auzeville-Tolosane. Pour réaliser ce graphique, nous allons :    

-   filter les données sur la station "AUZEVILLE-TOLOSANE-INRA"
-   créer un Plot avec un titre, un axe des y avec un quadrillage horizontal de 10° et deux line avec en x la date et en y temp_min et temp_max. Les courbes auront des couleurs steelblue pour le min et tomato pour le max.     
-   afficher le graphique grâce à un display.

Voici le code :
````
```js
// Filtrer les données pour le poste "AUZEVILLE-TOLOSANE-INRA"
const donneesFiltrees = meteo_31_2023_2024_extrait.filter(d => d.nom_poste === "AUZEVILLE-TOLOSANE-INRA");

// Créer un graphique combiné pour temp_min et temp_max
const graphiqueTemp = Plot.plot({
  title: "Températures minimales et maximales pour AUZEVILLE-TOLOSANE-INRA",
  y: {grid: true, inset: 10, label: "Température (°C)"},
  marks: [
    Plot.lineY(donneesFiltrees, {
      x: "date",
      y: "temp_min",
      stroke: "steelblue",
      label: "Temp. min"
    }),
    Plot.lineY(donneesFiltrees, {
      x: "date",
      y: "temp_max",
      stroke: "tomato",
      label: "Temp. max"
    })
  ]
});

// Afficher le graphique
display(graphiqueTemp);
```
````

### Graphique en bar

Maintenant je veux juste des barres verticales pour le précipitations : 

````
```js
// Créer un graphique pour les précipitations
const barTemp = Plot.plot({
  title: "Précipitations pour AUZEVILLE-TOLOSANE-INRA",
  y: {grid: true, label: "Précipitations (mm)"},
  x: {
    grid: true,
    label: "Date",
    // Utiliser une fonction pour filtrer les ticks pour afficher un tick tous les 3 mois
    ticks: d3.utcMonth.every(3)
  },
  marks: [
    Plot.barY(donneesFiltrees, {
      x: "date",
      y: "precipitation",
      fill: "darkslateblue"
          }),
    Plot.ruleY([0]) // permet d'afficher une horizontal à 0
  ]
});

// Afficher le graphique
display(barTemp);
```
````

## Affichage d'une carte (map)

Encore une bonne nouvelle : Observable Framework a chargé par défaut Leaflet. Cela nous permet de créer des cartes interactives très facilement avec la fonction **L**.

Par exemple, j'aimerais afficher une carte avec les températures maximales pour une date donnée pour toutes les stations du département.

Comme pour les exemples précédents je commence par filtrer mes données et j'ajoute le code suivant : 

````
```js
// Filtrer les données pour la date du 21-05-2023
const donneesDuJour = meteo_31_2023_2024_extrait.filter(d => d.date.toISOString().startsWith("2023-05-21"));

// Créer la section de la page (div) qui contiendra la carte
const div = display(document.createElement("div"));
div.style = "height: 400px;";

// Créer la carte avec leaflet et centrer sur la Haute-Garonne
const map = L.map(div)
  .setView([43.2927, 1.8828], 8);

// Ajouter une couche de tuiles à la carte
L.tileLayer("https://tile.openstreetmap.org/{z}/{x}/{y}.png", {
  attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>'
})
  .addTo(map);

// Ajouter un marqueur pour chaque station météo
donneesDuJour.forEach(station => {
  L.marker([station.lat, station.lon]) // création d'un marker aux coordonées de la station
    .addTo(map)   // que l'on ajoute à la carte qui s'appelle map
    .bindPopup(`Station de ${station.nom_poste} </br> Température min: ${station.temp_min}°C </br> Température max: ${station.temp_max}°C </br> Précipitations: ${station.precipitation}mm`); // et ajout d'un popup qui contient les infos pertinentes
})
```
````


Il est possible d'afficher directement les températures sur la carte comme une carte de météo. Le code est un peu plus compliqué et vous le trouverez dans la page  [Aller plus loin](./aller_plus_loin).    


## Zones de sélection / formulaires

Jusqu'à présent nous avons fixé les paramètres pour créer les tableaux, graphiques et cartes. Avec Observable Framework il est très facile de créer des zones de sélection ou des formulaires plus complexes pour permettre aux utilisateurs de filter ou sélectionner les données pertinentes.     

Pour cela nous allons de nouveau des Inputs (vu précédemment pour les tableaux). Il y a plusieurs types d'inputs utilisables comme éléments d'interface qui prennent les données saisies l'utilisateur et permette une interaction sur les données affichées : dropdowns, radios, sliders, and text boxes (listes déroulantes, radio-bouttons, curseurs et zones de texte).

Pour comprendre le fonctionnement, nous allons créer une liste déroulante avec le nom des stations météos. Pour cela nous allons récupérer la liste des stations et l'afficher dans un Inputs.select (<https://observablehq.com/framework/inputs/select>).


Voici le code pour une liste déroulante simple :

````
```js
//un tableau simple avec juste le nom des stations météo
const nomsStations = Array.from(new Set(meteo_31_2023_2024_extrait.map(d => d.nom_poste)));

//On met ça dans un Inputs.select et un view pour l'afficher
const color = view(Inputs.select(nomsStations, {label: "Choisir une station météo"}));

```
````

Maintenant je pourrais utiliser le résultat de cette liste pour afficher le tableau des données uniquement pour cette station.

````
```js
// Filtrage des données avec le résultat de l'input select
const donneesChoisies = meteo_31_2023_2024_extrait.filter(d => d.nom_poste === nomsStations_choix);

//affichage du tableau 
display(Inputs.table(donneesChoisies))
```

:::callout-warning
Il ne faut pas mettre dans le même bloc de code, la liste déroulante et l'utilisation de la liste déroulante.
:::
````

Vous pouvez utiliser ce principe pour le graphique et la carte.

## Mise en forme


### Carte (card)

Observable utilise des cartes pour grouper et délimiter du contenu. Pour créer une carte, il suffit d'utiliser la balise div avec la class *card* :

````
<div class="card"></div>
````

Essayer cette balise pour mettre dedans un tableau, un graphique ou une carte.

:::callout-tip
Il n'est pas possible de mettre du code js dans une balise div. Il faut créer une fonction dans un bloc js en dehors de la div, et l'appeler dans la div. Voici un exemple : 
````
```js
function launchTimeline(data, {width} = {}) {
  return Plot.plot({
    title: "Launches over the years",
    width,
    height: 300,
    y: {grid: true, label: "Launches"},
    color: {...color, legend: true},
    marks: [
      Plot.rectY(data, Plot.binX({y: "count"}, {x: "date", fill: "state", interval: "year", tip: true})),
      Plot.ruleY([0])
    ]
  });
}
```

<div class="grid grid-cols-1">
  <div class="card">
    ${resize((width) => launchTimeline(launches, {width}))}
  </div>
</div>
````
:::

### Grille

Une grille va contenir des cartes. Il est possible d'indiquer le nombre de colonnes de la page. Par exemple, si on veut 4 colonnes : 

````
<div class="grid grid-cols-4">
  <div class="card"><h1>A</h1></div>
  <div class="card"><h1>B</h1></div>
  <div class="card"><h1>C</h1></div>
  <div class="card"><h1>D</h1></div>
</div>
````

Les possibilités sont *grid-cols-2*, *grid-cols-3*, ou *grid-cols-4*.       
Voir les différentes possibilités de grille : <https://observablehq.com/framework/markdown#grids>

::::callout-note
Retravailler votre page de météo pour mettre les items dans des cartes et définissez une grille d'affichage.
::::

### Thème

Il est possible d'appliquer des thèmes. Pour cela il faut mettre à jour l'entête du fichier `.md` en ajoutant : `theme: "glacier"` ou `theme: [cotton, slate]`

Voir le détail des thèmes ici : <https://observablehq.com/framework/themes>. 

### Texte en couleur

Vous pouvez écrire du texte en couleur, via une balise Html :     

-  `<div class="red">Ce texte est en rouge.</div>`
-  `<div class="yellow">Ce texte est en jaune.</div>`
-  `<div class="green">Ce texte est en vert.</div>`
-  `<div class="blue">Ce texte est en bleu.</div>`
-  `<div class="muted">Ce texte est en gris clair.</div>`


### Création de blocs mis en valeur
 
On peut ajouter des blocs de *note*, *tip*, *warning* et *caution* : 

````
<div class="note" label="Note">C'est une note.</div>
<div class="tip" label="Astuce">C'est une astuce.</div>
<div class="warning" label="⚠️ Danger ⚠️">C'est une attention.</div>
<div class="caution" label>C'est une mise en garde.</div>

````



<button type="button" class="btn btn-primary btn-lg">

<a href="deploiement_projet.qmd">Suivant</a>

</button>
