---
title: "Déploiement"
---

## Problème avec le déploiement de sites internet

Nous pouvons être très content de nous : nous avons réussi à développer un site web de tableau de bord! La question que l'on se pose à ce niveau là est : où l'héberge-t-on ?     

Traditionnellement, face à cette question, nous devons nous tourner vers un service informatique et monter un projet de déploiement qui peut être long, s'il n'est pas impossible car pas dans les standards informatiques.  

![](img/ou_deployer.jpg)


## Déploiement simple avec Observable Projects

La force avec Observable Framework c'est que l'on peut déployer ce site, en une ligne de commande pour qu'il soit accessible à tous très rapidement. Pour cela vous devez aller dans le terminal et saisir la commande `npm run deploy` et répondre aux questions posées. Voici ce que j'ai fait :    

![](img/deploy_observable.png)

Et le résultat est ici : [https://delormeformationinterne.observablehq.cloud/formation-observable-ssp/](https://delormeformationinterne.observablehq.cloud/formation-observable-ssp/)

## Redéploiement simple avec Observable Projects

A chaque modification majeure de votre site, vous relancez un `npm run deploy` et une nouvelle version de votre site est déployé. 

![](img/deploy_correction_1.png)     
![](img/deploy_correction_2.png)

## Consultation de l'état des déploiements 

En vous connectant à Observable, vous avez accès à vos projets. Je vous propose de cliquer sur le bouton de détails :

![](img/deploiement_info.png)     

vous aurez accès aux données d'audience de votre site : 

![](img/deploiement_analytics.png)  

ainsi qu'à l'historique de déploiement :

![](img/deploiement_histo.png)


## Limites d'un déploiement Observable

Vous noterez que l'url est liée au compte/projet observable. Dans un objectif de site professionnel, il existe des solutions pour que l'url soit configurable (avec un coût).

Il faut également noter que l'offre gratuite d'Observable Framework ne permet qu'un seul projet. 


::::callout-warning
Attention : le déploiement et le stockage sur Github impose qu'aucune donnée sous secret soit dans le site. Il convient de traiter le secret avant de mettre les données sur le site web.   
::::


## Déploiement avec Github Pages

### Premier commit/push

Pour l'instant notre code n'est que dans notre Codespaces. Pour le remonter à Github, il faut faire un commit/push.

Voir ici : <https://docs.github.com/en/codespaces/developing-in-a-codespace/using-source-control-in-your-codespace#committing-your-changes>

### Déposer les fichiers packages

Pour que le déploiement dans Github Pages fonctionne, il faut qu'il y ait les fichiers package.json et package-lock.json à la racine de votre projet. Vous pouvez les télécharger ici : <https://github.com/anaelDelorme/observable_formation_SSP/tree/main/formation> et les importer dans votre codespaces à la racine de votre repo.   


Pensez à faire un commit/push pour envoyer les fichiers sur Github.    

### Création du script de déploiement

Si vous souhaitez publier plusieurs sites observable gratuitement, vous pouvez utiliser la fonctionnalité gratuite de Github qui s'appelle Github Pages. Elle permet de déployer des sites web statiques avec une adresse de type http://votrecompte.github.io/votrerepo/.   

Pour permettre ce déploiement, il faut utiliser un service de Github qui s'appelle Actions. Il permet de lancer des scripts *de prod* à chaque *action*. Par exemple, à chaque action **nouveau commit sur la branche main**, lancer le script deploiement.yml.

Le script est écrit dans un langage qui s'appelle YAML.

Voici les étapes à suivre :

-   Aller dans votre répertoire sur Github et cliquer sur **settings** 

![](img/github_settings.png)

-   Aller sur Pages et changer le source pour mettre Github Actions

![](img/github_pages_settings.png)

-   Cliquer sur **Create your own** pour créer votre yaml. Pensez à l'extension .yml.

Voici à quoi il doit ressembler : 

````

name: Publish
on:
  workflow_dispatch:
  push:
    branches: ["main"]
permissions:
  contents: write
jobs:
  build:
    concurrency: ci-${{ github.ref }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: "npm"

      - name: Install dependencies
        run: |
            cd formation
            npm ci

      - name: Build
        run: |
            cd formation
            npm run build

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./formation/dist

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


````

Il vous suffit de lui donner un nom sans oublier l'extension **.yml** et de cliquer sur Commit :

![](img/github_save_yaml.png)

Et de valider :    

![](img/github_pages_commit.png)

::::callout-tip
Pensez à faire un pull dans votre codespaces afin de récupérer le fichier créé via l'interface de Github.
::::


### Vérification du déploiement

Pour vérifier le déploiement, il faut aller dans l'onglet Actions du repo Github. Ici on voit que l'actions n'a pas fonctionné. En cliquant dessus, on pourra voir l'erreur et corriger le yml. 

![](img/gtihub_actions_fail.png)


Pour corriger le YAML, je vous conseille d'aller sur Codespaces, dans l'onglet Git de faire un pull pour récupérer le fichier créé dans Github. Et vous pouvez le modifier ici et commit/push pour l'envoyer à Github et lancer l'action :

![](img/github_pull.png)


Si tout se passe bien, cela déploie le site comme ici : [https://anaeldelorme.github.io/observable_formation_SSP/](https://anaeldelorme.github.io/observable_formation_SSP/)


<button type="button" class="btn btn-primary btn-lg">

<a href="aller_plus_loin.qmd">Suivant</a>

</button>
